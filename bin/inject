#!/usr/bin/env node

const parseArgs = require('minimist')
const fs = require('fs-extra')
const path = require('path')
const { log, warn } = require('../lib/helpers/logger')
const { CONFIG_NAME, ELECTRON_SCRIPT_NAME } = require('../lib/constant')

const easyElePkg = require('../package.json')
const easyEleCmd = Object.keys(easyElePkg.bin)[0]

// 注入后的项目所需要安装的依赖
const requires = [
	{ name: 'electron', version: '12.0.5', dev: true },
	{ name: 'express' },
	{ name: 'get-port' },
	{ name: 'electron-log' },
	{ name: 'electron-store' }
]

const argv = parseArgs(process.argv.slice(2), {
	alias: {
		y: 'yarn',
		n: 'npm',
		h: 'help'
	},
	boolean: ['y', 'n', 'h']
})

if (argv.help) {
	console.log(`
  Description
    Inject electron to project
  Usage
    $ easy-electron inject
  Options
    --yarn, -y     Use yarn
    --npm, -n      Use npm
    --help, -h     Displays this message
  `)
	process.exit(0)
}

let packager = argv.yarn ? 'yarn' : argv.npm ? 'npm' : ''

// 注入
console.log()
const processPath = process.cwd()
const configPath = path.resolve(processPath, CONFIG_NAME)

if (!fs.existsSync(configPath)) {
	/* 拷贝模板 */
	// TODO: 模板一般放在git上，然后此处下载（download-git-repo）
	fs.copySync(path.resolve(__dirname, '../template'), processPath)
	log(`Done copy template to ${processPath}`)

	// 注入package.json scripts
	const appPaths = require('../lib/app-paths')
	const pkgPath = appPaths.resolve.app('package.json')
	let pkg = require(pkgPath)
	// 暂时不主动添加脚本到package.json里面
	/*
	pkg.scripts = pkg.scripts || {}
	pkg.scripts['ele'] = `${easyEleCmd} run`
	pkg.scripts['ele:build'] = `${easyEleCmd} build`
	fs.writeFileSync(pkgPath, JSON.stringify(pkg, null, 2), 'utf-8')
	log(`Done inject scripts`)
  */

	// 更新gitignore
	const { addToGitIgnore } = require('../lib/helpers/git-utils')
	const electronDistPath = require(appPaths.configPath).build.outDir
	addToGitIgnore(`/${electronDistPath}`, '# electron dist')
	addToGitIgnore(ELECTRON_SCRIPT_NAME, '# electron scripts')
	log(`Done add dist to gitignore`)

	/* 安装easy-electron */
	// 因为easy-electron包含了一些dependencies，在项目中是需要的devDependencies
	const { installPackage } = require('../lib/helpers/node-utils')
	// inject project pkg
	// 清除require缓存
	// delete require.cache[require.resolve(pkgPath)]
	// pkg = require(pkgPath)
	const pkgDependencies = pkg.dependencies || {}
	const pkgDevDependencies = pkg.devDependencies || {}
	// easy-electron pkg
	if (!pkgDependencies[easyElePkg.name] && !pkgDevDependencies[easyElePkg.name]) {
		installPackage(easyElePkg.name, { dev: true, packager })
		log(`Done install ${easyElePkg.name}`)
	} else {
		log(`${easyElePkg.name} exists`)
	}

	// 安装依赖
	log(`Install dependencies...`)
	for (let item of requires) {
		if (!pkgDependencies[item.name]) {
			installPackage(item.version ? `${item.name}@^${item.version}` : item.name, { dev: item.dev, packager })
			log(`Done install ${item.name}`)
		} else {
			log(`${item.name} exists`)
		}
	}

	log(`Done inject electron\n`)

	// 打印使用方式
	console.log(`
Usage:
  1. Edit: ${CONFIG_NAME} -> scripts -> serve build
  2. Run Dev: npx ${easyEleCmd} run
  3. Build: npx ${easyEleCmd} build
  `)
} else {
	warn(`Easy-electron exists\n`)
}
